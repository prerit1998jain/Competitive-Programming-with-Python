INTRODUCTION TO OBJECT ORIENTED PROGRAMMING

It is a programming paradigm which provides a mean of structuring programs so that
properties and behaviors are bundled into individual objects.

For instance, an object could represent a person with some data associated to it
such as name, address, phone no. etc and can perform some functions such as walking,
talking, singing, bathing etc.

WHAT ARE CLASSES?

The primitive data structures in python such as strings, lists etc are designed
to store simple data types like your address, a song, your favourite color etc.

But when it comes to more complex data which are interrelated between each other,
these datatypes lacks organization. For eg, if you have data related to different
cars, there color, company, mileage, warranty etc, if you attempt to store this
data into lists, it will be very difficult to organize.

Thus we require classes. Classes are the new user-defined data structures that
contain some arbitrary information about something. Consider you have a class
called Animal() and store the data such as name or age of the animal.

It's important to note that classes only provide structure, it's a blueprint for
something should be defined, but it doesn't actually provide any real content itself.
Class can be considered as an idea of how to define something.

PYTHON OBJECTS:

Python objects are also known as instances. It is a copy of the class with
actual values stored in it. It's not an idea anymore, it is an actual animal, with
a specific name and age.

For eg, you can consider classes as a form or questionnaire and when you fill that form,
it becomes your instance of the form consisting of actual information relevant to
you. You can fill out multiple copies of the same form, but without the form as guide,
you can't define an instance.
